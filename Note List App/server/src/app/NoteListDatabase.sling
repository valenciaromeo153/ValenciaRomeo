import jk.log
import jk.sqlite
import jk.mysql
import jk.sql
import jk.env
import jk.time

class:

model Note
{
    id as string
    name as string
    description as string
    timeStampAdded as long
    timeStampLastUpdated as long
}

const NOTE = "note"
pvar db as MySQLDatabase

func forContext(ctx as LoggingContext) static as this
{
    var cstr = EnvironmentVariable.get("NOTELIST_DATABASE")
    Log.debug(ctx, "Opening database connection: '" .. cstr .. "'")
    db = MySQLDatabase.forConnectionStringSync(ctx, cstr)
    if not db:
        Error.throw("failedToConnectToDatabase", cstr)
    var v = new this()
    v.setDb(db)
    return v
}

func updateTable(table as SQLTableInfo)
{
    if not table:
        Error.throw("nullTable", "updateTable")
    if not db:
        Error.throw("nullDb", "updateTable")
    if not db.ensureTableExistsSync(table):
        Error.throw("failedToUpdateTable", table.getName())
}

func updateTables
{
    var note = SQLTableInfo.forName(NOTE)
    note.addStringKeyColumn("id")
    note.addStringColumn("name")
    note.addStringColumn("description")
    note.addLongColumn("timeStampAdded")
    note.addLongColumn("timeStampLastUpdated")
    updateTable(note)
}

func addNote(note as Note) as Note
{
    assert note
    note.setId("1")
    note.setTimeStampAddedValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(NOTE, note.toDynamicMap()))
    return note
}

func updateNote(id as string, note as Note) as bool
{
    assert note
    note.setTimeStampLastUpdatedValue(SystemClock.asUTCSeconds())
    var criteria = new Note()
    criteria.setId(id)
    return db.executeSync(db.prepareUpdateStatementSync(NOTE, criteria.toDynamicMap(), note.toDynamicMap()))
}

func deleteNote(id as string) as bool
{
    var criteria = new Note()
    criteria.setId(id)
    return db.executeSync(db.prepareDeleteStatementSync(NOTE, criteria.toDynamicMap()))
}

func getNotes as DynamicMap
{
    var v = new vector<Note>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(NOTE)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var note = Note.forJsonObject(o)
        if not note:
            continue
        v += note
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}

func close
{
    if db:
        db.closeSync()
    db = null
}
